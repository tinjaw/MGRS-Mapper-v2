const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
// const CompressionPlugin = require('compression-webpack-plugin');
// const CircularDependencyPlugin = require('circular-dependency-plugin');


module.exports = [{
  entry: ['./src/css/app.scss', './src/js/app.js', './src/js/ui/mdcComponents.js', './src/js/ui/pushbar.js', './src/js/map/map.js', './src/js/map/moveSymbol.js'],
  output: {
    filename: 'bundle.js',
  },
  module: {
    rules: [
      {
        test: /\.(sc|c)ss$/,
        use: [
          {
            loader: 'file-loader',
            options: {
              name: 'bundle.css',
            },
          },
          { loader: 'extract-loader' },
          { loader: 'css-loader' },
          {
            loader: 'sass-loader',
            options: {
              includePaths: ['./node_modules'],
            },
          },
        ],
      },
      {
        test: /\.js$/,
        loader: 'babel-loader',
        query: {
          presets: ['es2015'],
          plugins: ['transform-object-assign', 'transform-object-rest-spread'],
          cacheDirectory: true,
        },
      },
      {
        test: /\.png$/,
        use: [
          'file-loader',
        ],
      },
    ],
  },
  performance: {
    // ! This just hides the file size warnings in the console
    hints: false,
  },
  // inline-source-map load times: 26.89, 26, 26.23, 25.21, 25.59
  // devtool: 'inline-source-map',
  //! eval is the best performance for builds, use inline-source-maps for better debugging
  // eval load times: 10.02, 18.7, 18.95, 23.92
  devtool: 'cheap-source-map',
  devServer: {
    open: true,
  },
  plugins: [
    new BundleAnalyzerPlugin(),
    // new CircularDependencyPlugin({
    //   // `onStart` is called before the cycle detection starts
    //   onStart({ compilation }) {
    //     console.log('start detecting webpack modules cycles');
    //   },
    //   // `onDetected` is called for each module that is cyclical
    //   onDetected({ module: webpackModuleRecord, paths, compilation }) {
    //     // `paths` will be an Array of the relative module paths that make up the cycle
    //     // `module` will be the module record generated by webpack that caused the cycle
    //     console.log('+++++++++++++++++++++++++++++++++++');
    //     console.log(webpackModuleRecord);
    //     console.log('----------------------------');
    //     compilation.errors.push(new Error(paths.join(' -> ')));
    //   },
    //   // `onEnd` is called before the cycle detection ends
    //   onEnd({ compilation }) {
    //     console.log('end detecting webpack modules cycles');
    //   },
    // }),

    // https://medium.com/@rajaraodv/two-quick-ways-to-reduce-react-apps-size-in-production-82226605771a
    // new CompressionPlugin({
    //   asset: '[path].gz[query]',
    //   algorithm: 'gzip',
    //   test: /\.js$|\.css$|\.html$/,
    //   threshold: 10240,
    //   minRatio: 0.8,
    // }),
  ],
}];
